import java.text.SimpleDateFormat

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-android-extensions'
}

def isCI = (System.getenv("CI") ?: "false").toBoolean()

def twitter_consumer_key =
        isCI ? System.getenv("twitter_consumer_key") : project.property("twitter_consumer_key")
def twitter_consumer_secret =
        isCI ? System.getenv("twitter_consumer_secret") : project.property("twitter_consumer_secret")
def encrypt_name =
        isCI ? System.getenv("encrypt_name") : project.property("encrypt_name")

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "com.seki.saezurishiki"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.3.2"

        buildConfigField "String", "TWITTER_CONSUMER_KEY", "\"$twitter_consumer_key\""
        buildConfigField "String", "TWITTER_CONSUMER_SECRET", "\"$twitter_consumer_secret\""
        buildConfigField "String", "ENCRYTP_NAME", "\"$encrypt_name\""
        buildConfigField "String", "BUILD_DATE", "\"${buildDate()}\""
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
        }

        release {
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
    }

    lintOptions {
        abortOnError false
    }

    androidExtensions {
        experimental = true
    }

    applicationVariants.all { variant ->
        if (variant.buildType.name == "release") {
            variant.outputs.all {
                def applicationId = defaultConfig.applicationId
                def versionCode = defaultConfig.versionCode
                def versionName = defaultConfig.versionName
                outputFileName = "${applicationId}_${versionCode}_${versionName}.apk"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    def androidx_appcompat_version = "1.0.2"
    implementation "androidx.appcompat:appcompat:$androidx_appcompat_version"

    def androidx_version = "1.0.0"
    implementation "com.google.android.material:material:$androidx_version"
    implementation "androidx.preference:preference:$androidx_version"

    def twitter4j_version = "4.0.7"
    implementation "org.twitter4j:twitter4j-core:$twitter4j_version"
    implementation "org.twitter4j:twitter4j-stream:$twitter4j_version"
    implementation "org.twitter4j:twitter4j-async:$twitter4j_version"

    def picasso_version = "2.3.3"
    implementation "com.squareup.picasso:picasso:$picasso_version"

    def conceal_version = "1.1.3"
    implementation "com.facebook.conceal:conceal:$conceal_version@aar"

    def dagger_version = "2.22.1"
    implementation "com.google.dagger:dagger:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    def exoplayer_version = '2.10.4'
    implementation "com.google.android.exoplayer:exoplayer:$exoplayer_version"
    
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

def static buildDate() {
    def format = new SimpleDateFormat("yyyy/MM/dd")
    return format.format(new Date())
}

def GRADLE_PROPERTIES_PATH = '../../gradle.properties'

// Create gradle.properties to take build settings to CI if CI build.
task createGradleProperties {
    if (!isCI) {
        return
    }

    def properties = [
            'android.useAnroidX' : true,
            'android.enableJetifier' : true
    ]

    def gradleProperties = file(GRADLE_PROPERTIES_PATH)

    properties.forEach { key, val ->
        gradleProperties += "$key=$val"
    }

}
